{"ast":null,"code":"var _jsxFileName = \"/Users/aysan/SENG-LIVE-083021/phase-3/09-sinatra-crud/pizza_maker_client/src/components/ingredient/IngredientInterface.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport NewIngredient from \"./NewIngredient\";\nimport IngredientList from \"./IngredientList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Ingredient({\n  orgs\n}) {\n  _s();\n\n  const [ingredients, setIngredients] = useState([]); // Make a GET request for all Ingredients\n\n  useEffect(() => {\n    fetch(\"http://localhost:9292/ingredients\").then(resp => resp.json()).then(ingredients => setIngredients(ingredients));\n  }, []);\n\n  const addNewIngredient = ingredient => {\n    setIngredients([...ingredients, ingredient]);\n  };\n\n  function handleUpdateIngredient(updatedIngredient) {\n    const updatedIngredients = ingredients.map(ingredient => {\n      if (ingredient.id === updatedIngredient.id) {\n        return updatedIngredient;\n      } else {\n        return ingredient;\n      }\n    });\n    setIngredients(updatedIngredients);\n  }\n\n  const deleteIngredient = id => {\n    const updatedIngredients = ingredients.filter(ingredient => ingredient.id !== id);\n    setIngredients(updatedIngredients);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(IngredientList, {\n      ingredients: ingredients,\n      deleteIngredient: deleteIngredient,\n      onUpdateIngredient: handleUpdateIngredient\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NewIngredient, {\n      addNewIngredient: addNewIngredient\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Ingredient, \"uMtY1mJVgguGfhq6h4p5o8ejUzk=\");\n\n_c = Ingredient;\nexport default Ingredient;\n\nvar _c;\n\n$RefreshReg$(_c, \"Ingredient\");","map":{"version":3,"sources":["/Users/aysan/SENG-LIVE-083021/phase-3/09-sinatra-crud/pizza_maker_client/src/components/ingredient/IngredientInterface.js"],"names":["React","useEffect","useState","NewIngredient","IngredientList","Ingredient","orgs","ingredients","setIngredients","fetch","then","resp","json","addNewIngredient","ingredient","handleUpdateIngredient","updatedIngredient","updatedIngredients","map","id","deleteIngredient","filter"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;;AAEA,SAASC,UAAT,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAA8B;AAAA;;AAC5B,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,EAAD,CAA9C,CAD4B,CAG5B;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,KAAK,CAAC,mCAAD,CAAL,CACGC,IADH,CACSC,IAAD,IAAUA,IAAI,CAACC,IAAL,EADlB,EAEGF,IAFH,CAESH,WAAD,IAAiBC,cAAc,CAACD,WAAD,CAFvC;AAGD,GAJQ,EAIN,EAJM,CAAT;;AAMA,QAAMM,gBAAgB,GAAIC,UAAD,IAAgB;AACvCN,IAAAA,cAAc,CAAC,CAAC,GAAGD,WAAJ,EAAiBO,UAAjB,CAAD,CAAd;AACD,GAFD;;AAIA,WAASC,sBAAT,CAAgCC,iBAAhC,EAAmD;AACjD,UAAMC,kBAAkB,GAAGV,WAAW,CAACW,GAAZ,CAAiBJ,UAAD,IAAgB;AACzD,UAAIA,UAAU,CAACK,EAAX,KAAkBH,iBAAiB,CAACG,EAAxC,EAA4C;AAC1C,eAAOH,iBAAP;AACD,OAFD,MAEO;AACL,eAAOF,UAAP;AACD;AACF,KAN0B,CAA3B;AAOAN,IAAAA,cAAc,CAACS,kBAAD,CAAd;AACD;;AAED,QAAMG,gBAAgB,GAAID,EAAD,IAAQ;AAC/B,UAAMF,kBAAkB,GAAGV,WAAW,CAACc,MAAZ,CAAoBP,UAAD,IAAgBA,UAAU,CAACK,EAAX,KAAkBA,EAArD,CAA3B;AACAX,IAAAA,cAAc,CAACS,kBAAD,CAAd;AACD,GAHD;;AAKA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE,QAAC,cAAD;AACE,MAAA,WAAW,EAAEV,WADf;AAEE,MAAA,gBAAgB,EAAEa,gBAFpB;AAGE,MAAA,kBAAkB,EAAEL;AAHtB;AAAA;AAAA;AAAA;AAAA,YADF,eAME,QAAC,aAAD;AAAe,MAAA,gBAAgB,EAAEF;AAAjC;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;;GAxCQR,U;;KAAAA,U;AA0CT,eAAeA,UAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport NewIngredient from \"./NewIngredient\";\nimport IngredientList from \"./IngredientList\";\n\nfunction Ingredient({ orgs }) {\n  const [ingredients, setIngredients] = useState([]);\n\n  // Make a GET request for all Ingredients\n  useEffect(() => {\n    fetch(\"http://localhost:9292/ingredients\")\n      .then((resp) => resp.json())\n      .then((ingredients) => setIngredients(ingredients));\n  }, []);\n\n  const addNewIngredient = (ingredient) => {\n    setIngredients([...ingredients, ingredient]);\n  };\n\n  function handleUpdateIngredient(updatedIngredient) {\n    const updatedIngredients = ingredients.map((ingredient) => {\n      if (ingredient.id === updatedIngredient.id) {\n        return updatedIngredient;\n      } else {\n        return ingredient;\n      }\n    });\n    setIngredients(updatedIngredients);\n  }\n\n  const deleteIngredient = (id) => {\n    const updatedIngredients = ingredients.filter((ingredient) => ingredient.id !== id);\n    setIngredients(updatedIngredients);\n  };\n\n  return (\n    <div className=\"App\">\n      <IngredientList\n        ingredients={ingredients}\n        deleteIngredient={deleteIngredient}\n        onUpdateIngredient={handleUpdateIngredient}\n      />\n      <NewIngredient addNewIngredient={addNewIngredient} />\n    </div>\n  );\n}\n\nexport default Ingredient;\n"]},"metadata":{},"sourceType":"module"}